/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package one_time_pad_technique;

import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.JOptionPane;

/**
 *
 * @author Abuelhassan
 */
public class Encryption extends javax.swing.JFrame {

    /**
     * Creates new form ceaser_encryption
     */
    public Encryption() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        back = new javax.swing.JButton();
        encrypt = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        message = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Encrypt by One Time pad Technique");

        jPanel1.setLayout(null);

        back.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        back.setText("Back");
        back.setFocusPainted(false);
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });
        jPanel1.add(back);
        back.setBounds(380, 300, 120, 60);

        encrypt.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        encrypt.setText("Encrypt");
        encrypt.setFocusPainted(false);
        encrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptActionPerformed(evt);
            }
        });
        jPanel1.add(encrypt);
        encrypt.setBounds(90, 300, 120, 60);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 0, 0));
        jLabel2.setText("Enter Your Message to Encrypt ");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(10, 10, 570, 40);

        message.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        message.setForeground(new java.awt.Color(51, 51, 255));
        message.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                messageActionPerformed(evt);
            }
        });
        message.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                messageKeyTyped(evt);
            }
        });
        jPanel1.add(message);
        message.setBounds(20, 80, 550, 50);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/one_time_pad_technique/one_time_pad.png"))); // NOI18N
        jLabel1.setText("jLabel1");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(0, 140, 590, 320);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 586, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 461, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        one_time_pad_encryption on = new one_time_pad_encryption();
        on.setSize(580, 463);
        on.setLocation(400, 150);
        on.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backActionPerformed
    private int generate() {
        Random r = new Random();
        int Low = 32;
        int High = 58;
        int Result = 0;
        Result = r.nextInt(High - Low) + Low;
        return Result;
    }
    private void encryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptActionPerformed
        try {
            String check = message.getText();
            if (!check.isEmpty()) {
                ArrayList<Integer> Ciphertext = new ArrayList();
                ArrayList<String> Ciphertext_inString = new ArrayList();
                ArrayList<Integer> Key = new ArrayList();
                ArrayList<String> key_in_hex = new ArrayList();
                byte[] bytes = check.getBytes("US-ASCII");
                int key = 0;
                int sum = 91;
                for (int i = 0; i < bytes.length; i++) {
                    key = generate();
                    sum = key ^ bytes[i];
                    while (sum == 64 || sum == 91 || sum == 92 || sum == 93 || sum == 94 || sum == 95 || sum == 96) {
                        key = generate();
                        sum = key ^ bytes[i];
                    }
                    Ciphertext.add(sum);
                    Key.add(key);
                }
                
                for (int j = 0; j < Ciphertext.size(); j++) {
                    String valueOf = String.valueOf(Character.toChars(Ciphertext.get(j)));
                    Ciphertext_inString.add(valueOf);
                }
                StringBuilder builder = new StringBuilder();
                for (String value : Ciphertext_inString) {
                    builder.append(value);
                }
                String cipher_text = builder.toString();
                

                
                for (int m = 0; m < Key.size(); m++) {
                    key_in_hex.add(Integer.toHexString(Key.get(m)));
                }
                StringBuilder key_builder = new StringBuilder();
                for (Integer key_value : Key) {
                    key_builder.append(key_value);
                }
                String key_text = key_builder.toString();
                JOptionPane.showMessageDialog(null, "<html><body>Your Decrypted message is : <p style='width: 200px;'>" + cipher_text + "</p> with key: <p style='width: 200px;'>" + key_text + "</p></body></html>", "cipher message", JOptionPane.INFORMATION_MESSAGE);

            } else {
                JOptionPane.showMessageDialog(null, "Please enter your message to encrypt", "empty input", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Please enter a valid message", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_encryptActionPerformed

    private void messageKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_messageKeyTyped
        int length = message.getText().length();
        if (length >= 1000) {
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(null, "max message input is 1000 letter", "Error", JOptionPane.ERROR_MESSAGE);

        }
        char c = evt.getKeyChar();
        try {
            if (c == KeyEvent.VK_SPACE) {
                getToolkit().beep();
                evt.consume();
                JOptionPane.showMessageDialog(null, "Spaces are not allowed", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                if (!(Character.isLetter(c) || (c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE || c == KeyEvent.VK_ENTER)) {
                    getToolkit().beep();
                    evt.consume();
                    JOptionPane.showMessageDialog(null, "Please enter only letters", "Error", JOptionPane.ERROR_MESSAGE);
                } else {

                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please enter a valid message", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_messageKeyTyped

    private void messageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_messageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_messageActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Encryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Encryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Encryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Encryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Encryption().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton back;
    private javax.swing.JButton encrypt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField message;
    // End of variables declaration//GEN-END:variables
}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Double_Transposition_tecnique;

import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import javax.swing.JOptionPane;

/**
 *
 * @author Abuelhassan
 */
public class Encryption extends javax.swing.JFrame {

    /**
     * Creates new form ceaser_encryption
     */
    public Encryption() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        Encrypt = new javax.swing.JButton();
        back = new javax.swing.JButton();
        message = new javax.swing.JTextField();
        key = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Double TranspositionTechnique");
        setResizable(false);

        jPanel1.setLayout(null);

        Encrypt.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Encrypt.setText("Encrypt");
        Encrypt.setFocusPainted(false);
        Encrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EncryptActionPerformed(evt);
            }
        });
        jPanel1.add(Encrypt);
        Encrypt.setBounds(50, 350, 120, 60);

        back.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        back.setText("Back");
        back.setFocusPainted(false);
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });
        jPanel1.add(back);
        back.setBounds(400, 360, 120, 60);

        message.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        message.setForeground(new java.awt.Color(51, 51, 255));
        message.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                messageActionPerformed(evt);
            }
        });
        message.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                messageKeyTyped(evt);
            }
        });
        jPanel1.add(message);
        message.setBounds(20, 90, 550, 50);

        key.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        key.setForeground(new java.awt.Color(51, 51, 255));
        key.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyActionPerformed(evt);
            }
        });
        key.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                keyKeyTyped(evt);
            }
        });
        jPanel1.add(key);
        key.setBounds(20, 230, 280, 50);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 0, 0));
        jLabel2.setText("Enter Your Key");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(10, 170, 290, 40);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 0, 0));
        jLabel3.setText("Enter Your Message to Encrypt ");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(10, 20, 570, 40);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Double_Transposition_tecnique/binarycode.jpg"))); // NOI18N
        jLabel1.setText("jLabel1");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(0, 0, 590, 460);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 586, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 461, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void EncryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EncryptActionPerformed
        try {
            String check = message.getText();
            String Key = key.getText();
            ArrayList<String> Rows = new ArrayList();
            ArrayList<String> Cols = new ArrayList();
            ArrayList<Integer> Rows_in_int = new ArrayList();
            ArrayList<Integer> Rows_in_int_copy = new ArrayList();
            ArrayList<Integer> Cols_in_int = new ArrayList();
            ArrayList<Integer> Cols_in_int_copy = new ArrayList();
            if (!check.isEmpty()) {
                if (!Key.isEmpty()) {
                    if (Key.contains(";")) {
                        String[] Message = check.split("");
                        String[] Key_after_split = Key.split(";");
                        if (Key_after_split.length < 3) {
                            for (int i = 0; i < Key_after_split.length; i++) {
                                String[] split = Key_after_split[i].split("");
                                if (i == 0) {
                                    for (int j = 0; j < split.length; j++) {
                                        Rows.add(split[j]);
                                    }
                                } else {
                                    if (i == 1) {
                                        for (int m = 0; m < split.length; m++) {
                                            Cols.add(split[m]);
                                        }
                                    }
                                }
                            }
                            for (int a = 0; a < Rows.size(); a++) {
                                Rows_in_int.add(Integer.parseInt(Rows.get(a)));
                            }
                            for (int b = 0; b < Cols.size(); b++) {
                                Cols_in_int.add(Integer.parseInt(Cols.get(b)));
                            }
                            Cols_in_int_copy = Cols_in_int;
                            Rows_in_int_copy = Rows_in_int;
                            Set<Integer> set_cols = new HashSet<Integer>(Cols_in_int_copy);
                            Set<Integer> set_rows = new HashSet<Integer>(Rows_in_int_copy);
                            int flag = 0;
                            Integer max_row = Collections.max(Rows_in_int_copy);
                            Integer max_col = Collections.max(Cols_in_int_copy);
                            if (!(set_cols.size() < Cols_in_int_copy.size())) {
                                if (!(set_rows.size() < Rows_in_int_copy.size())) {
                                    if (check.length() <= (max_col * max_row)) {
                                        if (max_row == Rows_in_int_copy.size()) {
                                            if (max_col == Cols_in_int_copy.size()) {
                                                for (int e = 1; e <= Rows_in_int_copy.size(); e++) {
                                                    if (Rows_in_int_copy.contains(e)) {
                                                        for (int f = 1; f <= Cols_in_int_copy.size(); f++) {
                                                            if (Cols_in_int_copy.contains(f)) {
                                                                flag = 1;
                                                            } else {
                                                                JOptionPane.showMessageDialog(null, "Your Key column can't apply to the message Please enter Valid KEY (Rows;Cols) like  : (2314;213)", "Error", JOptionPane.ERROR_MESSAGE);
                                                            }
                                                        }
                                                    } else {
                                                        JOptionPane.showMessageDialog(null, "Your Key row can't apply to the message Please enter Valid KEY (Rows;Cols) like  : (2314;213)", "Error", JOptionPane.ERROR_MESSAGE);
                                                    }
                                                }
                                            } else {
                                                JOptionPane.showMessageDialog(null, "Your Key column can't apply to the message Please enter Valid KEY (Rows;Cols) like  : (2314;213)", "Error", JOptionPane.ERROR_MESSAGE);
                                            }
                                        } else {
                                            JOptionPane.showMessageDialog(null, "Your Key row can't apply to the message Please enter Valid KEY (Rows;Cols) like  : (2314;213)", "Error", JOptionPane.ERROR_MESSAGE);
                                        }
                                    } else {
                                        JOptionPane.showMessageDialog(null, "Your Key can't apply to the message Please enter Valid KEY (Rows;Cols) like  : (2314;213)", "Error", JOptionPane.ERROR_MESSAGE);
                                    }

                                } else {
                                    JOptionPane.showMessageDialog(null, "Your Key rows has duplicate  Please enter Valid KEY (Rows;Cols) like  : (2314;213)", "Error", JOptionPane.ERROR_MESSAGE);
                                }
                            } else {
                                JOptionPane.showMessageDialog(null, "Your Key column has duplicate  Please enter Valid KEY (Rows;Cols) like  : (2314;213)", "Error", JOptionPane.ERROR_MESSAGE);
                            }
                            String[][] plaint_text = new String[Rows_in_int_copy.size()][Cols_in_int_copy.size()];
                            String[][] plaint_text_copy = new String[Rows_in_int_copy.size()][Cols_in_int_copy.size()];
                            String[][] plaint_text_copy_copy = new String[Rows_in_int_copy.size()][Cols_in_int_copy.size()];
                            ArrayList<String> Cipher_text_list = new ArrayList<String>(plaint_text_copy_copy.length);
                            if (flag == 1) {
                                int wordcounter = 0;
                                for (int rowcounter = 0; rowcounter < Rows_in_int.size(); rowcounter++) {
                                    for (int colcounter = 0; colcounter < Cols_in_int.size(); colcounter++) {
                                        if (wordcounter < Message.length) {
                                            plaint_text[rowcounter][colcounter] = Message[wordcounter];
                                        } else {
                                            plaint_text[rowcounter][colcounter] = "X";
                                        }
                                        wordcounter++;
                                    }
                                }
                                for (int rowcounter = 0; rowcounter < Rows_in_int.size(); rowcounter++) {
                                    for (int colcounter = 0; colcounter < Cols_in_int.size(); colcounter++) {
                                        plaint_text_copy[rowcounter][colcounter] = plaint_text[rowcounter][colcounter];
                                    }
                                }
                                for (int r = 0; r < Rows_in_int_copy.size(); r++) {
    for (int v = 0; v < Cols_in_int_copy.size(); v++) {
                                        plaint_text_copy[r][v] = plaint_text[((Rows_in_int_copy.get(r)) - 1)][v];
                                    }
                                }
                                for (int rowcounter = 0; rowcounter < Rows_in_int.size(); rowcounter++) {
                                    for (int colcounter = 0; colcounter < Cols_in_int.size(); colcounter++) {
                                        plaint_text_copy_copy[rowcounter][colcounter] = plaint_text_copy[rowcounter][colcounter];
                                    }
                                }
                                for (int r = 0; r < Cols_in_int_copy.size(); r++) {
                                    for (int v = 0; v < Rows_in_int_copy.size(); v++) {
                                        plaint_text_copy_copy[v][r] = plaint_text_copy[v][((Cols_in_int_copy.get(r)) - 1)];
                                    }
                                }
                                for (int rowcounter = 0; rowcounter < Rows_in_int.size(); rowcounter++) {
                                    for (int colcounter = 0; colcounter < Cols_in_int.size(); colcounter++) {
                                        Cipher_text_list.add(plaint_text_copy_copy[rowcounter][colcounter]);
                                    }
                                }
                                StringBuilder builder = new StringBuilder();
                                for (String value : Cipher_text_list) {
                                    builder.append(value);
                                }
                                String cipher_text = builder.toString();
                                JOptionPane.showMessageDialog(null, "<html><body>Your Decrypted message is : <p style='width: 200px;'>" + cipher_text + "</p> with key: <p style='width: 200px;'>" + Key + "</p></body></html>", "cipher message", JOptionPane.INFORMATION_MESSAGE);
                            }
                            flag = 0;
                        } else {
                            JOptionPane.showMessageDialog(null, "Please enter Valid KEY (Rows;Cols) like  : (2314;213)", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Your key is missing semi-colon ( ; ) Please enter Valid KEY (Rows;Cols) like  : (2314;213)", "Valid KEY", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Please enter The KEY", "empty input", JOptionPane.ERROR_MESSAGE);
                }

            } else {
                JOptionPane.showMessageDialog(null, "Please enter your message to encrypt", "empty input", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Please enter a valid message", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_EncryptActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        double_transporation_encryption de = new double_transporation_encryption();
        de.setLocation(400, 150);
        de.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backActionPerformed

    private void messageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_messageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_messageActionPerformed

    private void messageKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_messageKeyTyped
        int length = message.getText().length();
        if (length >= 9800) {
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(null, "max message input is 9800 letter", "Error", JOptionPane.ERROR_MESSAGE);

        }
        char c = evt.getKeyChar();
        try {
            if (c == KeyEvent.VK_SPACE) {
                getToolkit().beep();
                evt.consume();
                JOptionPane.showMessageDialog(null, "Spaces are not allowed", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                if (!(Character.isLetter(c) || (c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE || c == KeyEvent.VK_ENTER)) {
                    getToolkit().beep();
                    evt.consume();
                    JOptionPane.showMessageDialog(null, "Please enter only letters", "Error", JOptionPane.ERROR_MESSAGE);
                } else {

                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please enter a valid message", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_messageKeyTyped

    private void keyKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_keyKeyTyped
        int length = key.getText().length();
        if (length > 198) {
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(null, "Please enter a valid Key", "Error", JOptionPane.ERROR_MESSAGE);

        }
        char c = evt.getKeyChar();
        try {
            if (!(Character.isDigit(c) || (c == KeyEvent.VK_SEMICOLON) || (c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE || c == KeyEvent.VK_ENTER)) {
                getToolkit().beep();
                evt.consume();
                JOptionPane.showMessageDialog(null, "Please enter Valid KEY (Rows;Cols) like  : (2314;213)", "Error", JOptionPane.ERROR_MESSAGE);
            } else {

            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please enter a valid message", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_keyKeyTyped

    private void keyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keyActionPerformed

    }//GEN-LAST:event_keyActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Encryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Encryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Encryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Encryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Encryption().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Encrypt;
    private javax.swing.JButton back;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField key;
    private javax.swing.JTextField message;
    // End of variables declaration//GEN-END:variables
}

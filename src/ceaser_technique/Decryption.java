/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ceaser_technique;

import java.awt.event.KeyEvent;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author Abuelhassan
 */
public class Decryption extends javax.swing.JFrame {

    /**
     * Creates new form Encryption
     */
    public Decryption() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        message = new javax.swing.JTextField();
        key = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        decrypt = new javax.swing.JButton();
        back = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Decrypt By Ceaser technique");
        setResizable(false);

        jPanel1.setLayout(null);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 255, 102));
        jLabel2.setText("Enter Your Message to Decrypt ");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel1.add(jLabel2);
        jLabel2.setBounds(0, 0, 580, 60);

        message.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        message.setForeground(new java.awt.Color(51, 51, 255));
        message.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                messageActionPerformed(evt);
            }
        });
        message.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                messageKeyTyped(evt);
            }
        });
        jPanel1.add(message);
        message.setBounds(30, 60, 520, 60);

        key.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        key.setForeground(new java.awt.Color(51, 51, 255));
        key.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25" }));
        key.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyActionPerformed(evt);
            }
        });
        jPanel1.add(key);
        key.setBounds(30, 190, 140, 50);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 255, 102));
        jLabel3.setText("Choose the Key");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(10, 130, 340, 50);

        decrypt.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        decrypt.setText("Decrypt");
        decrypt.setFocusPainted(false);
        decrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decryptActionPerformed(evt);
            }
        });
        jPanel1.add(decrypt);
        decrypt.setBounds(120, 280, 130, 60);

        back.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        back.setText("Back");
        back.setFocusPainted(false);
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });
        jPanel1.add(back);
        back.setBounds(310, 280, 130, 60);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ceaser_technique/Capture.PNG"))); // NOI18N
        jLabel1.setText("jLabel1");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(0, 0, 580, 460);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void messageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_messageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_messageActionPerformed

    private void keyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keyActionPerformed

    }//GEN-LAST:event_keyActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        ceaser_encryption ce = new ceaser_encryption();
        ce.setSize(580, 463);
        ce.setLocation(400, 150);
        ce.setVisible(true);
        this.dispose();

    }//GEN-LAST:event_backActionPerformed

    private void decryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decryptActionPerformed
        try {
            String check = message.getText();
            if (!check.isEmpty()) {
                ArrayList<String> Plaintext = new ArrayList();
                ArrayList<String> Ciphertext = new ArrayList();
                ArrayList<String> output = new ArrayList();
                int Shift = Integer.parseInt((String) key.getSelectedItem());
                int shift_clone = Shift;
                String Dummy_input = check;
                String input = Dummy_input.toUpperCase();
                Plaintext.add("A");
                Plaintext.add("B");
                Plaintext.add("C");
                Plaintext.add("D");
                Plaintext.add("E");
                Plaintext.add("F");
                Plaintext.add("G");
                Plaintext.add("H");
                Plaintext.add("I");
                Plaintext.add("J");
                Plaintext.add("K");
                Plaintext.add("L");
                Plaintext.add("M");
                Plaintext.add("N");
                Plaintext.add("O");
                Plaintext.add("P");
                Plaintext.add("Q");
                Plaintext.add("R");
                Plaintext.add("S");
                Plaintext.add("T");
                Plaintext.add("U");
                Plaintext.add("V");
                Plaintext.add("W");
                Plaintext.add("X");
                Plaintext.add("Y");
                Plaintext.add("Z");
                for (int i = 0; i < 26; i++) {
                    if (Shift != Plaintext.size()) {
                        Ciphertext.add(i, Plaintext.get(Shift));
                        Shift++;
                    } else {
                        if (Shift == Plaintext.size()) {
                            for (int j = 0; j < shift_clone; j++) {
                                Ciphertext.add(Plaintext.get(j));
                            }
                            break;
                        }
                    }
                }
                String[] result = input.split("");
                for (int i = 0; i < result.length; i++) {
                    int index_want_to_encrypt = Ciphertext.indexOf(result[i]);
                    output.add(Plaintext.get(index_want_to_encrypt));
                }
                StringBuilder builder = new StringBuilder();
                for (String value : output) {
                    builder.append(value);
                }
                String plain_text = builder.toString();
                JOptionPane.showMessageDialog(null, "<html><body>your message is : <p style='width: 200px;'>" + plain_text + "</p> with : " + shift_clone + "</body></html>", "orginal message", JOptionPane.INFORMATION_MESSAGE);

            } else {
                JOptionPane.showMessageDialog(null, "Please enter your message to Decrypt", "empty input", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please enter a valid message", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_decryptActionPerformed

    private void messageKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_messageKeyTyped
        int length = message.getText().length();
        if (length >= 1000) {
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(null, "max message input is 1000 letter", "Error", JOptionPane.ERROR_MESSAGE);

        }
        char c = evt.getKeyChar();
        try {
            if (c == KeyEvent.VK_SPACE) {
                getToolkit().beep();
                evt.consume();
                JOptionPane.showMessageDialog(null, "Spaces are not allowed", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                if (!(Character.isLetter(c) || (c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE || c == KeyEvent.VK_ENTER)) {
                    getToolkit().beep();
                    evt.consume();
                    JOptionPane.showMessageDialog(null, "Please enter only letters", "Error", JOptionPane.ERROR_MESSAGE);
                } else {

                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please enter a valid message", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_messageKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Decryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Decryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Decryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Decryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Decryption().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton back;
    private javax.swing.JButton decrypt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JComboBox key;
    private javax.swing.JTextField message;
    // End of variables declaration//GEN-END:variables
}
